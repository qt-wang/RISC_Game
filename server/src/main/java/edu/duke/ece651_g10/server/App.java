/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651_g10.server;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;

public class App {

    /**
     * Read the input from the user
     *
     * @param prompt The String will print in the terminal before the user inputs
     *               data
     * @return the string that user input
     */
    public static String readString(String prompt, BufferedReader inputReader, PrintStream out) throws IOException {
        out.println(prompt);
        String str = inputReader.readLine();
        return str;
    }


    /**
     * Read the number from the user
     *
     * @param prompt The String will print in the terminal before the user inputs
     *               data
     * @param min    The minimum number accepted.
     * @param max    The maximum number accepted.
     * @return A number
     */
    public static int readInteger(String prompt, BufferedReader inputReader, PrintStream out, int min, int max) throws IOException {
        try {
            int number = Integer.parseInt(readString(prompt, inputReader, out));
            if (number < min || number > max) {
                out.println("Please input valid integer.");
                return readInteger(prompt,inputReader, out, min, max);
            }
            return number;
        } catch (NumberFormatException e) {
            out.println("Please input valid integer.");
            return readInteger(prompt, inputReader, out, min, max);
        }
    }

    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) throws IOException, InterruptedException {
//        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
//        RuleChecker moveRuleChecker = new TerritoryExistChecker(new PlayerSelfOrderChecker(new SelfTerritoryChecker(new ConnectedTerritoryChecker(new SufficientUnitChecker(null)))));
//        RuleChecker attackRuleChecker = new TerritoryExistChecker(new PlayerSelfOrderChecker(new EnemyTerritoryChecker(new AdjacentTerritoryChecker(new SufficientUnitChecker(null)))));
//        Server server;
//        GameMapFactory factory;
//        String selectMap = "Please enter the map you want to choose:\n" +
//                "1. Fixed game map (3 players, 3 territory for each player)\n" +
//                "2. Random map (select player numbers and territory numbers)";
//        int mapType = readInteger(selectMap, input, System.out, 1, 2);
//        if (mapType == 1) {
//            factory = new FixedGameMapFactory();
//            server = new Server(12345, 3, 12, 4, factory, moveRuleChecker, attackRuleChecker, new V1OrderProcessor());
//        } else {
//            factory = new V1GameMapFactory(new PseudoNumberGenerator());
//            String numPlayers = "Please select the number of players allowed in this game (2 - 5)";
//            int players = readInteger(numPlayers, input, System.out, 2, 5);
//            String selectTerritory = "Please enter the number of territories for each player (2- 20)";
//            int territories = readInteger(selectTerritory, input, System.out, 2, 20);
//            server = new Server(12345, players, 25, territories, factory, moveRuleChecker, attackRuleChecker, new V1OrderProcessor());
//        }
//        server.run();
        Server server = new Server(12345, new FixedGameMapFactory());
        server.run();
    }
}
